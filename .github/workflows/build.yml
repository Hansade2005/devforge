name: Build DevForge

on:
  push:
    branches: [ main, release/*, github-workflow ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        shell: pwsh
        run: |
          # Set GitHub Packages registry for scoped packages
          npm config set @microsoft:registry https://npm.pkg.github.com/
          npm config set @vscode:registry https://npm.pkg.github.com/
          # Set auth token for GitHub Packages
          npm config set "//npm.pkg.github.com/:_authToken" "${{ github.token }}"
          # Set network timeouts
          npm config set fetch-timeout 300000
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          # Install dependencies
          npm install
          npm install -g node-gyp
          npm install -g gulp-cli
      - name: Install type definitions for TypeScript
        run: |
          npm install --save-dev @types/mocha @types/node @types/semver @types/sinon @types/trusted-types @types/winreg @webgpu/types @types/wicg-file-system-access || true
        shell: pwsh
      - name: Build Extensions
        shell: pwsh
        run: |
          # Explicitly compile extensions
          gulp compile-extensions-build
      - name: Build
        shell: pwsh
        env:
          STRICT_NODE_MODULES_SKIP: true # Force strict skipping of node_modules during mangling
        run: |
          npm run buildreact
          # Clean build directories first
          gulp clean-out-build
          # Compile without mangling
          gulp compile-build-without-mangling
          # Bundle and minify for Windows x64
          gulp minify-vscode
          gulp vscode-win32-x64-min
          # Ensure build output directory exists
          New-Item -ItemType Directory -Force -Path ..\VSCode-win32-x64
          # Copy build output to expected location
          Copy-Item -Path "out-vscode-min\*" -Destination "..\VSCode-win32-x64" -Recurse -Force
      - name: Package
        run: |
          mkdir -p .build/win32-x64
          # First check if VSCode build exists in the .build directory
          if (Test-Path ".build\VSCode-win32-x64") {
            $sourcePath = ".build\VSCode-win32-x64\*"
            Write-Host "Using build output from .build\VSCode-win32-x64"
          } elseif (Test-Path "..\VSCode-win32-x64") {
            $sourcePath = "..\VSCode-win32-x64\*"
            Write-Host "Using build output from ..\VSCode-win32-x64"
          } else {
            Write-Error "Could not find VSCode build output directory"
            exit 1
          }

          # Verify that the build output contains necessary files
          $fileCount = (Get-ChildItem -Path ($sourcePath -replace '\*$', '') -Recurse -File | Measure-Object).Count
          Write-Host "Found $fileCount files in the build output directory"

          if ($fileCount -lt 10) {
            Write-Warning "Very few files found in build directory. This may indicate an incomplete build."
          }

          Write-Host "Creating zip archive..."
          Compress-Archive -Path $sourcePath -DestinationPath .build\win32-x64\devforge-win32-x64.zip

          # Verify the zip file was created successfully
          if (Test-Path ".build\win32-x64\devforge-win32-x64.zip") {
            $zipSize = (Get-Item ".build\win32-x64\devforge-win32-x64.zip").Length
            Write-Host "Zip archive created successfully. Size: $($zipSize / 1MB) MB"
          } else {
            Write-Error "Failed to create zip archive"
            exit 1
          }
        shell: pwsh

      - name: Generate checksum
        run: |
          cd .build/win32-x64
          $hash = Get-FileHash -Algorithm SHA256 devforge-win32-x64.zip
          $hash.Hash | Out-File -Encoding ascii devforge-win32-x64.zip.sha256
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: devforge-win32-x64
          path: |
            .build/win32-x64/devforge-win32-x64.zip
            .build/win32-x64/devforge-win32-x64.zip.sha256
  build-windows-arm64:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        shell: pwsh
        run: |
          # Set GitHub Packages registry for scoped packages
          npm config set @microsoft:registry https://npm.pkg.github.com/
          npm config set @vscode:registry https://npm.pkg.github.com/
          # Set auth token for GitHub Packages
          npm config set "//npm.pkg.github.com/:_authToken" "${{ github.token }}"
          # Set network timeouts
          npm config set fetch-timeout 300000
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          # Install dependencies
          npm install
          npm install -g node-gyp
          npm install -g gulp-cli
      - name: Install type definitions for TypeScript
        run: |
          npm install --save-dev @types/mocha @types/node @types/semver @types/sinon @types/trusted-types @types/winreg @webgpu/types @types/wicg-file-system-access || true
        shell: pwsh
      - name: Build Extensions
        shell: pwsh
        run: |
          # Explicitly compile extensions
          gulp compile-extensions-build
      - name: Build
        shell: pwsh
        run: |
          npm run buildreact
          # Clean build directories first
          gulp clean-out-build
          # Compile without mangling
          gulp compile-build-without-mangling
          # Bundle and minify for Windows ARM64
          gulp minify-vscode
          gulp vscode-win32-arm64-min
          # Ensure build output directory exists
          New-Item -ItemType Directory -Force -Path ..\VSCode-win32-arm64
          # Copy build output to expected location
          Copy-Item -Path "out-vscode-min\*" -Destination "..\VSCode-win32-arm64" -Recurse -Force
      - name: Package
        run: |
          mkdir -p .build/win32-arm64
          # First check if VSCode build exists in the .build directory
          if (Test-Path ".build\VSCode-win32-arm64") {
            $sourcePath = ".build\VSCode-win32-arm64\*"
            Write-Host "Using build output from .build\VSCode-win32-arm64"
          } elseif (Test-Path "..\VSCode-win32-arm64") {
            $sourcePath = "..\VSCode-win32-arm64\*"
            Write-Host "Using build output from ..\VSCode-win32-arm64"
          } else {
            Write-Error "Could not find VSCode build output directory"
            exit 1
          }

          # Verify that the build output contains necessary files
          $fileCount = (Get-ChildItem -Path ($sourcePath -replace '\*$', '') -Recurse -File | Measure-Object).Count
          Write-Host "Found $fileCount files in the build output directory"

          if ($fileCount -lt 10) {
            Write-Warning "Very few files found in build directory. This may indicate an incomplete build."
          }

          Write-Host "Creating zip archive..."
          Compress-Archive -Path $sourcePath -DestinationPath .build\win32-arm64\devforge-win32-arm64.zip

          # Verify the zip file was created successfully
          if (Test-Path ".build\win32-arm64\devforge-win32-arm64.zip") {
            $zipSize = (Get-Item ".build\win32-arm64\devforge-win32-arm64.zip").Length
            Write-Host "Zip archive created successfully. Size: $($zipSize / 1MB) MB"
          } else {
            Write-Error "Failed to create zip archive"
            exit 1
          }
        shell: pwsh

      - name: Generate checksum
        run: |
          cd .build/win32-arm64
          $hash = Get-FileHash -Algorithm SHA256 devforge-win32-arm64.zip
          $hash.Hash | Out-File -Encoding ascii devforge-win32-arm64.zip.sha256
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: devforge-win32-arm64
          path: |
            .build/win32-arm64/devforge-win32-arm64.zip
            .build/win32-arm64/devforge-win32-arm64.zip.sha256
